#include "main.h"
#include <sys/types.h>
/**
 * print_error_exit - number of argument is not the correct
 * one, exit with code 97 and print
 * close_file_exit - close content file
 * main - entry point
 * @fd:file descriptor
 * @argc:argument count
 * @argv:argument vector
 * @message:content of a file
 * Return: Always 0 (success)
 */
void print_error_exit(const char *message)
{
	dprintf(2, "%s\n", message);
	exit(1);
}

void close_file_exit(int fd)
{
	if (close(fd) == -1)
	{
		dprintf(2, "Error: Can't close fd %d\n", fd);
		exit(100);
}
}
int main(int argc, char *agrv[])
{
	const char *file_from = argv[1];
	const char *file_to = argv[2];
	const int BUFFER_SIZE = 1024;
	char buffer[BUFFER_SIZE];
	ssize_t bytes_read, bytes_written;
	int fd;

	if (argc != 3)
	{
		print_error_exit("Usage: cp file_from file_to");

	fd_from = open(file_from, O_RDONLY);
	if (fd_from == -1)
		dprintf(2, "Error: Can't read from file %s\n", file_from);
	exit(98);
}
fd_to = open(file_to, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP);
if (fd_to == -1)
{
	close_file_exit(fd_from);
	dprintf(2, "Error: Can't write to %s\n", file_to);
	exit(99);
}

while (( bytes_read = read(fd_from, buffer, BUFFER_SIZE)) > 0)
{
	bytes_written = write(fd_to, buffer, bytes_read);
	if (bytes_written != bytes_read)
	{
		close_file_exit(fd_from);
		close_file_exit(fd_to);
		dprintf(2, "Error: Can't write to %s\n", file_to);
		exit(99);
	}
}

if (bytes_read == -1)
{
	close_file_exit(fd_from);
	close_file_exit(fd_to);
	dprintf(2, "Error: Can't read from file %s\n", file_from);
	exit(98);
}
close_file_exit(fd_from);
close_file_exit(fd_to);

return (0);
}
